---
name: dockerhub-release

on:
  workflow_dispatch:
    inputs:
      autor_proyecto:
        description: "Autor/proyecto a analizar"
        required: true
        default: ""
      java_version:
        type: choice
        description: "Java version"
        required: true
        options:
          - jdk-8
          - jdk-11

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  ISSUE_NUMBER: ${{ github.event.issue.number }}
  RELEASE_REVISION: ${{ github.event.issue.number }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
  KUBE_NAMESPACE: production
  ECR_REPOSITORY: microflow-test

jobs:
  retrieve-project:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout input project
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.inputs.autor_proyecto }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Add project to directory
        run: mkdir ../project && mv * ../project && mv ../project .

      - uses: actions/upload-artifact@v3
        with:
          name: project
          path: .
  deploy:
    runs-on: ubuntu-20.04
    needs: retrieve-project
    steps:
      - name: Get project
        id: get-project
        uses: actions/download-artifact@v3
        with:
          name: project

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build & Push Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          RELEASE_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:1
        run: |
          cd project
          ls .
          docker-compose build \                                
            --tag ${{ env.RELEASE_IMAGE }} \                                                           
            --push
